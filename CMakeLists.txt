cmake_minimum_required(VERSION 3.20)
project(imgui_customs LANGUAGES C CXX)

# ---- Configuration ----
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Recommend static runtime on MSVC for "portable" exe (optional)
if (MSVC)
  add_compile_options(/permissive- /Zc:preprocessor /Zc:__cplusplus)
  # set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()

# On Windows, prefer bundled GLFW binaries off to avoid UCRT dll hassles
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)

# Dear ImGui demo on by default (toggle)
option(IMGUI_ENABLE_DEMO "Build Dear ImGui demo code" ON)

include(FetchContent)

# ---- Fetch GLFW ----
FetchContent_Declare(
  glfw
  GIT_REPOSITORY https://github.com/glfw/glfw.git
  GIT_TAG        3.4
)
FetchContent_MakeAvailable(glfw)

# ---- Fetch GLM (header-only) ----
FetchContent_Declare(
  glm
  GIT_REPOSITORY https://github.com/g-truc/glm.git
  GIT_TAG        1.0.1
)
FetchContent_MakeAvailable(glm)

# ---- Fetch Dear ImGui (no native CMake, so we create a target) ----
FetchContent_Declare(
  imgui
  GIT_REPOSITORY https://github.com/ocornut/imgui.git
  GIT_TAG docking
)
FetchContent_GetProperties(imgui)
if (NOT imgui_POPULATED)
  FetchContent_Populate(imgui)
  # Create a library target for ImGui + backends
  add_library(imgui STATIC
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    $<$<BOOL:${IMGUI_ENABLE_DEMO}>:${imgui_SOURCE_DIR}/imgui_demo.cpp>
    ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
  )
  target_include_directories(imgui PUBLIC
    ${imgui_SOURCE_DIR}
    ${imgui_SOURCE_DIR}/backends
  )
  # Tell backend we use GLAD as loader (so it includes <glad/glad.h>)
  target_compile_definitions(imgui PUBLIC IMGUI_IMPL_OPENGL_LOADER_GLAD)
  target_link_libraries(imgui PUBLIC glfw)
endif()

# ---- GLAD (vendored; no FetchContent) ----
add_library(glad STATIC
  external/glad/src/glad.c
)
target_include_directories(glad PUBLIC external/glad/include)

# ---- App target ----
file(GLOB_RECURSE SRC CONFIGURE_DEPENDS
	src/*.cpp
	src/*.hpp
	src/*.h
)
add_executable(imgui_customs ${SRC})

target_include_directories(imgui_customs PRIVATE
  ${CMAKE_CURRENT_SOURCE_DIR}/src
)

target_link_libraries(imgui_customs PRIVATE
  imgui
  glfw
  glad
  glm::glm
)

# Windows: link necessary system libs
if (WIN32)
  target_link_libraries(imgui_customs PRIVATE opengl32)
endif()

# Enable high-DPI awareness on Windows (optional but nice)
if (MSVC)
  target_link_options(imgui_customs PRIVATE "/MANIFESTUAC:level='asInvoker' uiAccess='false'")
endif()

# ---- Runtime on Windows (copy glfw dll if generated as SHARED) ----
# Not needed if GLFW is static (default on MSVC). If you flip to shared, add a post-build copy step.

# ---- Install (optional) ----
install(TARGETS imgui_customs RUNTIME DESTINATION .)
